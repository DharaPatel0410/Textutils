{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","onClick","toggleMode","role","htmlFor","defaultProps","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","n_words","n_char","Words","split","newtext","join","charAt","length","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","Alert","alert","word","lower","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.0e5782c1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n        </li>\r\n        \r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n         <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckChecked\" />\r\n         <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">Enable Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"MY - Application\",\r\n    about: \"About\",\r\n     \r\n}\r\n\r\nexport default Navbar\r\n\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    \r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n\r\n    }\r\n\r\n    const handleCleartext = () => {\r\n        let newText = \" \";\r\n        setText(newText);\r\n        props.showAlert(\"Cleared !!\",\"success\");\r\n\r\n    }\r\n\r\n    const handleRemoveSpace = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces are removed\",\"success\");\r\n\r\n    }\r\n    const handleOnChange = (event) => {\r\n\r\n        setText(event.target.value);\r\n\r\n    }\r\n\r\n    const [text, setText] = useState(\"Enter your text here\");\r\n    let n_words = 0;\r\n    let n_char = 0;\r\n    if (text === \" \"){ \r\n       n_words = 0;\r\n        //n_char = 0\r\n    }\r\n    else{\r\n        let Words = text.split(/[ ]+/);\r\n        let newtext = Words.join(\" \");\r\n        if (text.charAt(text.length-1) === \" \"){\r\n            Words = newtext.split(\" \");\r\n            n_words = (Words.length) - 1;\r\n            n_char = (newtext.length) - 1;\r\n\r\n        \r\n\r\n        }\r\n         else\r\n         n_words = Words.length;\r\n         n_char = newtext.length;\r\n        \r\n       // n_words = text.split(\" \").length;\r\n   }\r\n  \r\n  \r\n    return (\r\n        <>\r\n             <div className='container my-2' style={{color: props.mode ==='dark'?'white':'black'}}>\r\n              \r\n                <div className=\"mb-3\">\r\n                 <label htmlFor=\"My-Box\" className=\"form-label\"><h2>{props.heading}</h2></label>\r\n                 <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'grey':'white',color: props.mode ==='dark'?'white':'black'}} id=\"My-Box\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleCleartext}>Clear text</button>\r\n                <button className=\"btn btn-primary m-1\" onClick={handleRemoveSpace}>Remove Extra Spaces</button>\r\n\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode ==='dark'?'white':'black'}}>\r\n                <h2>Your text Summary</h2>\r\n                <p><b>{n_words}</b> Words ,<b> {n_char}</b> Characters and <b>{0.008 * n_words} </b>Minutes to read</p>\r\n            \r\n                <h2>Preview</h2>\r\n                <p>{text}</p>\r\n            </div>\r\n            \r\n        </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1)\r\n\r\n    }\r\n  return (\r\n    props.alert &&\r\n    \r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n             <strong>{capitalize(props.alert.type)}</strong>:  {props.alert.msg}\r\n        </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","//import logo from './logo.svg';\nimport React,{ useState } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport Alert from './Components/Alert';\n//import About from './Components/About';\n\n\nfunction App() {\n\n  const [mode,setMode] = useState('light')\n  const [alert,setAlert] = useState(null)\n\nconst showAlert = (message,type) => {\n\nsetAlert({\n  msg : message,\n  type : type\n})\n\nsetTimeout(() => {\n  setAlert(null);\n  \n}, 1500);\n}\n\n  const toggleMode = () =>{\n\n  if(mode === 'light'){\n    setMode('dark');\n    document.body.style.backgroundColor = '#142e4b' \n    showAlert(\"Dark mode is enabled\",\"success\");\n  }\n  else\n  {\n    setMode('light')\n    document.body.style.backgroundColor = 'white';\n    showAlert(\"Light mode is enabled\",\"success\");\n\n  }\n  }\n\n  return (\n    \n    <div>\n        <Navbar title = \"TextUtils\"  about = \"About us\" mode = {mode} toggleMode = {toggleMode}></Navbar>\n        <Alert alert = {alert}/>\n       <div className=\"container my-3\">\n          <Textform  showAlert = {showAlert} heading = \"Enter the text to analyze\" mode = {mode}></Textform>\n       </div>\n      \n    </div>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}